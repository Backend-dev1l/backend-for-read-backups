// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user_progress.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUserProgress = `-- name: CreateUserProgress :one
INSERT INTO user_progress (
  user_id, word_id, correct_count, incorrect_count
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, user_id, word_id, correct_count, incorrect_count, last_attempt
`

type CreateUserProgressParams struct {
	UserID         pgtype.UUID `json:"user_id"`
	WordID         pgtype.UUID `json:"word_id"`
	CorrectCount   int32       `json:"correct_count"`
	IncorrectCount int32       `json:"incorrect_count"`
}

func (q *Queries) CreateUserProgress(ctx context.Context, arg CreateUserProgressParams) (UserProgress, error) {
	row := q.db.QueryRow(ctx, createUserProgress,
		arg.UserID,
		arg.WordID,
		arg.CorrectCount,
		arg.IncorrectCount,
	)
	var i UserProgress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WordID,
		&i.CorrectCount,
		&i.IncorrectCount,
		&i.LastAttempt,
	)
	return i, err
}

const deleteUserProgress = `-- name: DeleteUserProgress :exec
DELETE FROM user_progress
WHERE id = $1
`

func (q *Queries) DeleteUserProgress(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserProgress, id)
	return err
}

const getUserProgress = `-- name: GetUserProgress :one
SELECT id, user_id, word_id, correct_count, incorrect_count, last_attempt FROM user_progress
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserProgress(ctx context.Context, id pgtype.UUID) (UserProgress, error) {
	row := q.db.QueryRow(ctx, getUserProgress, id)
	var i UserProgress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WordID,
		&i.CorrectCount,
		&i.IncorrectCount,
		&i.LastAttempt,
	)
	return i, err
}

const getUserProgressByUserAndWord = `-- name: GetUserProgressByUserAndWord :one
SELECT id, user_id, word_id, correct_count, incorrect_count, last_attempt FROM user_progress
WHERE user_id = $1 AND word_id = $2 LIMIT 1
`

type GetUserProgressByUserAndWordParams struct {
	UserID pgtype.UUID `json:"user_id"`
	WordID pgtype.UUID `json:"word_id"`
}

func (q *Queries) GetUserProgressByUserAndWord(ctx context.Context, arg GetUserProgressByUserAndWordParams) (UserProgress, error) {
	row := q.db.QueryRow(ctx, getUserProgressByUserAndWord, arg.UserID, arg.WordID)
	var i UserProgress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WordID,
		&i.CorrectCount,
		&i.IncorrectCount,
		&i.LastAttempt,
	)
	return i, err
}

const listUserProgress = `-- name: ListUserProgress :many
SELECT id, user_id, word_id, correct_count, incorrect_count, last_attempt FROM user_progress
WHERE user_id = $1
ORDER BY last_attempt DESC
`

func (q *Queries) ListUserProgress(ctx context.Context, userID pgtype.UUID) ([]UserProgress, error) {
	rows, err := q.db.Query(ctx, listUserProgress, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserProgress{}
	for rows.Next() {
		var i UserProgress
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.WordID,
			&i.CorrectCount,
			&i.IncorrectCount,
			&i.LastAttempt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserProgress = `-- name: UpdateUserProgress :one
UPDATE user_progress
SET correct_count = $1, incorrect_count = $2, last_attempt = NOW()
WHERE id = $3
RETURNING id, user_id, word_id, correct_count, incorrect_count, last_attempt
`

type UpdateUserProgressParams struct {
	CorrectCount   int32       `json:"correct_count"`
	IncorrectCount int32       `json:"incorrect_count"`
	ID             pgtype.UUID `json:"id"`
}

func (q *Queries) UpdateUserProgress(ctx context.Context, arg UpdateUserProgressParams) (UserProgress, error) {
	row := q.db.QueryRow(ctx, updateUserProgress, arg.CorrectCount, arg.IncorrectCount, arg.ID)
	var i UserProgress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WordID,
		&i.CorrectCount,
		&i.IncorrectCount,
		&i.LastAttempt,
	)
	return i, err
}
