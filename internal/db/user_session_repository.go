// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user_sessions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUserSession = `-- name: CreateUserSession :one
INSERT INTO user_sessions (
  user_id, status
) VALUES (
  $1, $2
)
RETURNING id, user_id, started_at, ended_at, status
`

type CreateUserSessionParams struct {
	UserID pgtype.UUID `json:"user_id"`
	Status string      `json:"status"`
}

func (q *Queries) CreateUserSession(ctx context.Context, arg CreateUserSessionParams) (UserSession, error) {
	row := q.db.QueryRow(ctx, createUserSession, arg.UserID, arg.Status)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StartedAt,
		&i.EndedAt,
		&i.Status,
	)
	return i, err
}

const deleteUserSession = `-- name: DeleteUserSession :exec
DELETE FROM user_sessions
WHERE id = $1
`

func (q *Queries) DeleteUserSession(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserSession, id)
	return err
}

const getUserSession = `-- name: GetUserSession :one
SELECT id, user_id, started_at, ended_at, status FROM user_sessions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserSession(ctx context.Context, id pgtype.UUID) (UserSession, error) {
	row := q.db.QueryRow(ctx, getUserSession, id)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StartedAt,
		&i.EndedAt,
		&i.Status,
	)
	return i, err
}

const listActiveSessions = `-- name: ListActiveSessions :many
SELECT id, user_id, started_at, ended_at, status FROM user_sessions
WHERE status = 'active'
ORDER BY started_at DESC
`

func (q *Queries) ListActiveSessions(ctx context.Context) ([]UserSession, error) {
	rows, err := q.db.Query(ctx, listActiveSessions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserSession{}
	for rows.Next() {
		var i UserSession
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.StartedAt,
			&i.EndedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserSessions = `-- name: ListUserSessions :many
SELECT id, user_id, started_at, ended_at, status FROM user_sessions
WHERE user_id = $1
ORDER BY started_at DESC
`

func (q *Queries) ListUserSessions(ctx context.Context, userID pgtype.UUID) ([]UserSession, error) {
	rows, err := q.db.Query(ctx, listUserSessions, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserSession{}
	for rows.Next() {
		var i UserSession
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.StartedAt,
			&i.EndedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserSession = `-- name: UpdateUserSession :one
UPDATE user_sessions
SET status = $1, ended_at = $2
WHERE id = $3
RETURNING id, user_id, started_at, ended_at, status
`

type UpdateUserSessionParams struct {
	Status  string             `json:"status"`
	EndedAt pgtype.Timestamptz `json:"ended_at"`
	ID      pgtype.UUID        `json:"id"`
}

func (q *Queries) UpdateUserSession(ctx context.Context, arg UpdateUserSessionParams) (UserSession, error) {
	row := q.db.QueryRow(ctx, updateUserSession, arg.Status, arg.EndedAt, arg.ID)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StartedAt,
		&i.EndedAt,
		&i.Status,
	)
	return i, err
}
