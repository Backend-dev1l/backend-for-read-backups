// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user_statistics.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUserStatistics = `-- name: CreateUserStatistics :one
INSERT INTO user_statistics (
  user_id, total_words_learned, accuracy, total_time
) VALUES (
  $1, $2, $3, $4
)
RETURNING user_id, total_words_learned, accuracy, total_time, updated_at
`

type CreateUserStatisticsParams struct {
	UserID            pgtype.UUID    `json:"user_id"`
	TotalWordsLearned int32          `json:"total_words_learned"`
	Accuracy          pgtype.Numeric `json:"accuracy"`
	TotalTime         int32          `json:"total_time"`
}

func (q *Queries) CreateUserStatistics(ctx context.Context, arg CreateUserStatisticsParams) (UserStatistic, error) {
	row := q.db.QueryRow(ctx, createUserStatistics,
		arg.UserID,
		arg.TotalWordsLearned,
		arg.Accuracy,
		arg.TotalTime,
	)
	var i UserStatistic
	err := row.Scan(
		&i.UserID,
		&i.TotalWordsLearned,
		&i.Accuracy,
		&i.TotalTime,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserStatistics = `-- name: DeleteUserStatistics :exec
DELETE FROM user_statistics
WHERE user_id = $1
`

func (q *Queries) DeleteUserStatistics(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserStatistics, userID)
	return err
}

const getUserStatistics = `-- name: GetUserStatistics :one
SELECT user_id, total_words_learned, accuracy, total_time, updated_at FROM user_statistics
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUserStatistics(ctx context.Context, userID pgtype.UUID) (UserStatistic, error) {
	row := q.db.QueryRow(ctx, getUserStatistics, userID)
	var i UserStatistic
	err := row.Scan(
		&i.UserID,
		&i.TotalWordsLearned,
		&i.Accuracy,
		&i.TotalTime,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserStatistics = `-- name: UpdateUserStatistics :one
UPDATE user_statistics
SET total_words_learned = $1, accuracy = $2, total_time = $3, updated_at = NOW()
WHERE user_id = $4
RETURNING user_id, total_words_learned, accuracy, total_time, updated_at
`

type UpdateUserStatisticsParams struct {
	TotalWordsLearned int32          `json:"total_words_learned"`
	Accuracy          pgtype.Numeric `json:"accuracy"`
	TotalTime         int32          `json:"total_time"`
	UserID            pgtype.UUID    `json:"user_id"`
}

func (q *Queries) UpdateUserStatistics(ctx context.Context, arg UpdateUserStatisticsParams) (UserStatistic, error) {
	row := q.db.QueryRow(ctx, updateUserStatistics,
		arg.TotalWordsLearned,
		arg.Accuracy,
		arg.TotalTime,
		arg.UserID,
	)
	var i UserStatistic
	err := row.Scan(
		&i.UserID,
		&i.TotalWordsLearned,
		&i.Accuracy,
		&i.TotalTime,
		&i.UpdatedAt,
	)
	return i, err
}
