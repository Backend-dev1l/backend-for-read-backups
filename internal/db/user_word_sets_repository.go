// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user_word_sets.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUserWordSet = `-- name: CreateUserWordSet :one
INSERT INTO user_word_sets (
  user_id, word_set_id
) VALUES (
  $1, $2
)
RETURNING id, user_id, word_set_id, created_at
`

type CreateUserWordSetParams struct {
	UserID    pgtype.UUID `json:"user_id"`
	WordSetID pgtype.UUID `json:"word_set_id"`
}

func (q *Queries) CreateUserWordSet(ctx context.Context, arg CreateUserWordSetParams) (UserWordSet, error) {
	row := q.db.QueryRow(ctx, createUserWordSet, arg.UserID, arg.WordSetID)
	var i UserWordSet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WordSetID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUserWordSet = `-- name: DeleteUserWordSet :exec
DELETE FROM user_word_sets
WHERE id = $1
`

func (q *Queries) DeleteUserWordSet(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserWordSet, id)
	return err
}

const getUserWordSet = `-- name: GetUserWordSet :one
SELECT id, user_id, word_set_id, created_at FROM user_word_sets
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserWordSet(ctx context.Context, id pgtype.UUID) (UserWordSet, error) {
	row := q.db.QueryRow(ctx, getUserWordSet, id)
	var i UserWordSet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WordSetID,
		&i.CreatedAt,
	)
	return i, err
}

const listUserWordSets = `-- name: ListUserWordSets :many
SELECT id, user_id, word_set_id, created_at FROM user_word_sets
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListUserWordSets(ctx context.Context, userID pgtype.UUID) ([]UserWordSet, error) {
	rows, err := q.db.Query(ctx, listUserWordSets, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserWordSet{}
	for rows.Next() {
		var i UserWordSet
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.WordSetID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
